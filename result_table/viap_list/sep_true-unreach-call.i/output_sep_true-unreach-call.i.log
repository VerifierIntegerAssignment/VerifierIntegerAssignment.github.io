Program Body
{
  int N_var;
  int RET;
  RET = 0;
  int _1_FAILED;
  _1_FAILED = 0;
  N_var = __VERIFIER_nondet_int();
  if (N_var > 1)
  {
    int x[N_var];
    int temp;
    int ret;
    int ret2_var;
    int ret5_var;
    int N_var;
    int f1_1_RET;
    f1_1_RET = 0;
    long long f1_1_ret;
    f1_1_ret = 0;
    int f1_1_i;
    f1_1_i = 0;
    while (f1_1_i < N_var)
    {
      if ((x[f1_1_i] % 2) == 0)
        ret = ret + 1;

      f1_1_i = f1_1_i + 1;
    }

    f1_1_RET = f1_1_ret;
    ret = f1_1_RET;
    temp = x[0];
    x[0] = x[1];
    x[1] = temp;
    int N_var;
    int f1_2_RET;
    f1_2_RET = 0;
    long long f1_2_ret;
    f1_2_ret = 0;
    int f1_2_i;
    f1_2_i = 0;
    while (f1_2_i < N_var)
    {
      if ((x[f1_2_i] % 2) == 0)
        ret = ret + 1;

      f1_2_i = f1_2_i + 1;
    }

    f1_2_RET = f1_2_ret;
    ret2_var = f1_2_RET;
    temp = x[0];
    int i;
    i = 0;
    while (i < (N_var - 1))
    {
      x[i] = x[i + 1];
      i = i + 1;
    }

    x[N_var - 1] = temp;
    int N_var;
    int f1_3_RET;
    f1_3_RET = 0;
    long long f1_3_ret;
    f1_3_ret = 0;
    int f1_3_i;
    f1_3_i = 0;
    while (f1_3_i < N_var)
    {
      if ((x[f1_3_i] % 2) == 0)
        ret = ret + 1;

      f1_3_i = f1_3_i + 1;
    }

    f1_3_RET = f1_3_ret;
    ret5_var = f1_3_RET;
    if ((ret != ret2_var) || (ret != ret5_var))
    {
      _1_FAILED = 1;
    }

  }

  RET = 1;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ x:array f1_2_i:int temp:int ret2_var:int ret5_var:int _1_FAILED:int f1_3_i:int RET:int f1_1_i:int i:int f1_1_ret:long f1_2_ret:long ret:int f1_3_RET:int N_var:int f1_2_RET:int f1_3_ret:long f1_1_RET:int}
Program Body
{
  int N_var;
  int RET;
  RET = 0;
  long long ret;
  ret = 0;
  int i;
  i = 0;
  while (i < N_var)
  {
    if ((x[i] % 2) == 0)
      ret = ret + 1;
    else
      ret = ret - 1;

    i = i + 1;
  }

  RET = ret;
}

Function Name:
sep
Return Type:
int
Input Variables:
{ x:array}
Local Variables:
{ i:int N_var:int ret:long RET:int}

Output in normal notation:
1. Frame axioms:
x1 = x

2. Output equations:
f1_2_i1 = ite((__VERIFIER_nondet_int2>1),(_N2+0),f1_2_i)
f1_3_i1 = ite((__VERIFIER_nondet_int2>1),(_N4+0),f1_3_i)
temp1 = ite((__VERIFIER_nondet_int2>1),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),temp)
ret2_var1 = ite((__VERIFIER_nondet_int2>1),0,ret2_var)
ret5_var1 = ite((__VERIFIER_nondet_int2>1),0,ret5_var)
_1_FAILED1 = ite((__VERIFIER_nondet_int2>1),ite(((ret11(_N4)!=0) or (ret11(_N4)!=0)),1,0),0)
d1array1(_x1,_x2) = ite((__VERIFIER_nondet_int2>1),ite(((_x1=x) and (_x2=(__VERIFIER_nondet_int2-1))),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),d1array8(_x1,_x2,_N3)),d1array(_x1,_x2))
main = 1
i1 = ite((__VERIFIER_nondet_int2>1),(_N3+0),i)
f1_1_ret1 = ite((__VERIFIER_nondet_int2>1),0,f1_1_ret)
f1_2_RET1 = ite((__VERIFIER_nondet_int2>1),0,f1_2_RET)
ret1 = ite((__VERIFIER_nondet_int2>1),ret11(_N4),ret)
f1_3_RET1 = ite((__VERIFIER_nondet_int2>1),0,f1_3_RET)
f1_2_ret1 = ite((__VERIFIER_nondet_int2>1),0,f1_2_ret)
N_var1 = __VERIFIER_nondet_int2
f1_1_i1 = ite((__VERIFIER_nondet_int2>1),(_N1+0),f1_1_i)
f1_3_ret1 = ite((__VERIFIER_nondet_int2>1),0,f1_3_ret)
f1_1_RET1 = ite((__VERIFIER_nondet_int2>1),0,f1_1_RET)

3. Other axioms:
ret3((_n1+1)) = ite(((d1array(x,(_n1+0))%2)==0),(ret3(_n1)+1),ret3(_n1))
ret3(0) = ret
(_N1>=(__VERIFIER_nondet_int2-0))
(_n1<_N1) -> ((_n1+0)<__VERIFIER_nondet_int2)
ret6((_n2+1)) = ite(((ite(((x=x) and ((_n2+0)=1)),d1array(x,0),ite(((x=x) and ((_n2+0)=0)),d1array(x,1),d1array(x,(_n2+0))))%2)==0),(ret6(_n2)+1),ret6(_n2))
ret6(0) = 0
(_N2>=(__VERIFIER_nondet_int2-0))
(_n2<_N2) -> ((_n2+0)<__VERIFIER_nondet_int2)
d1array8(_x1,_x2,(_n3+1)) = ite(((_x1=x) and (_x2=(_n3+0))),d1array8(x,((_n3+0)+1),_n3),d1array8(_x1,_x2,_n3))
d1array8(_x1,_x2,0) = ite(((_x1=x) and (_x2=1)),d1array(x,0),ite(((_x1=x) and (_x2=0)),d1array(x,1),d1array(_x1,_x2)))
(_N3>=((__VERIFIER_nondet_int2-0)-1))
(_n3<_N3) -> ((_n3+0)<(__VERIFIER_nondet_int2-1))
ret11((_n4+1)) = ite(((ite(((/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c:73:15: error: ‘N_var’ undeclared here (not in a function)
 int sep(int x[N_var]);
               ^
x=x) and ((_n4+0)=(__VERIFIER_nondet_int2-1))),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),d1array8(x,(_n4+0),_N3))%2)==0),(ret11(_n4)+1),ret11(_n4))
ret11(0) = ret6(_N2)
(_N4>=(__VERIFIER_nondet_int2-0))
(_n4<_N4) -> ((_n4+0)<__VERIFIER_nondet_int2)

4. Assumption :

5. Assertion :
(_1_FAILED1==0)

Output in normal notation:
1. Frame axioms:
N_var1 = N_var
d1array1(_x1,_x2) = d1array(_x1,_x2)
x1(x) = x

2. Output equations:
i1 = (_N5+0)
sep(x) = ret46(_N5,x)
ret1(x) = ret46(_N5,x)

3. Other axioms:
ret46((_n5+1),x) = ite(((d1array(x,(_n5+0))%2)==0),(ret46(_n5,x)+1),(ret46(_n5,x)-1))
ret46(0,x) = 0
(_N5>=(N_var-0))
(_n5<_N5) -> ((_n5+0)<N_var)

4. Assumption :

5. Assertion :

Unknown
