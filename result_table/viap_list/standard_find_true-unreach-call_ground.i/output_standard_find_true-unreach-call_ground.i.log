Program Body
{
  int RET;
  RET = 0;
  int _1_PROVE[1000000];
  int a[100000];
  int e;
  e = __VERIFIER_nondet_int();
  int i;
  i = 0;
  int j;
  j = 0;
  while (j < 100000)
  {
    a[j] = __VERIFIER_nondet_int();
    j = j + 1;
  }

  while ((i < 100000) && (a[i] != e))
  {
    i = i + 1;
  }

  int x;
  x = 0;
  while (x < i)
  {
    _1_PROVE[x] = a[x] != e;
    x = x + 1;
  }

  RET = 0;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ a:array j:int e:int i:int _1_PROVE:array RET:int x:int}


Output in normal notation:
1. Frame axioms:
a1 = a

2. Output equations:
j1 = (_N1+0)
e1 = __VERIFIER_nondet_int2
i1 = (_N2+0)
d1array1(_x1,_x2) = d1array5(_x1,_x2,_N3)
main = 0
x1 = (_N3+0)

3. Other axioms:
d1array2(_x1,_x2,(_n1+1)) = ite(((_x1=a) and (_x2=(_n1+0))),__VERIFIER_nondet_int3(_n1),d1array2(_x1,_x2,_n1))
d1array2(_x1,_x2,0) = d1array(_x1,_x2)
(_N1>=(-(0)+100000))
(_n1<_N1) -> ((_n1+0)<100000)
(((_N2+0)>=100000) or (d1array2(a,(_N2+0),_N1)==__VERIFIER_nondet_int2))
(_n2<_N2) -> (((_n2+0)<100000) and (d1array2(a,(_n2+0),_N1)!=__VERIFIER_nondet_int2))
d1array5(_x1,_x2,(_n3+1)) = d1array5(_x1,_x2,_n3)
d1array5(_x1,_x2,0) = d1array2(_x1,_x2,_N1)
(_N3>=((_N2+0)-0))
(_n3<_N3) -> ((_n3+0)<(_N2+0))

4. Assumption :

5. Assertion :
(d1array5(a,(_n3+0),_N3)!=__VERIFIER_nondet_int2)

Axiomes Added

d1array2(a,(_n1+0),_N1) = __VERIFIER_nondet_int3(_n1)
d1array5(a,(_n1+0),_N3) = __VERIFIER_nondet_int3(_n1)
VIAP_STANDARD_OUTPUT_True
