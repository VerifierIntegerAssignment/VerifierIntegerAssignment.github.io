/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c:73:15: error: ‘N_var’ undeclared here (not in a function)
 int max(int x[N_var]);
               ^
/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c: In function ‘main’:
/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c:85:11: warning: implicit declaration of function ‘fun’ [-Wimplicit-function-declaration]
     ret = fun(x);
           ^
Program Body
{
  int N_var;
  int RET;
  RET = 0;
  int i;
  long long ret;
  ret = 0;
  i = 0;
  while (i < N_var)
  {
    if (ret < x[i])
    {
      ret = x[i];
    }
    else
    {
      ret = ret;
    }

    i = i + 1;
  }

  RET = ret;
}

Function Name:
max
Return Type:
int
Input Variables:
{ x:array}
Local Variables:
{ i:int N_var:int ret:long RET:int}
Program Body
{
  int N_var;
  int RET;
  RET = 0;
  int _1_FAILED;
  _1_FAILED = 0;
  N_var = __VERIFIER_nondet_int();
  if (N_var > 1)
  {
    int x[N_var];
    int temp;
    int ret;
    int ret2_var;
    int ret5_var;
    ret = fun(x);
    temp = x[0];
    x[0] = x[1];
    x[1] = temp;
    ret2_var = fun(x);
    temp = x[0];
    int i;
    i = 0;
    while (i < (N_var - 1))
    {
      x[i] = x[i + 1];
      i = i + 1;
    }

    x[N_var - 1] = temp;
    ret5_var = fun(x);
    if ((ret != ret2_var) || (ret != ret5_var))
    {
      _1_FAILED = 1;
    }

  }

  RET = 1;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ temp:int ret5_var:int _1_FAILED:int ret:int i:int ret2_var:int RET:int x:array N_var:int}

Output in normal notation:
1. Frame axioms:
N_var1 = N_var
d1array1(_x1,_x2) = d1array(_x1,_x2)
x1(x) = x

2. Output equations:
i1 = (_N1+0)
max(x) = ret4(_N1,x)
ret1(x) = ret4(_N1,x)

3. Other axioms:
ret4((_n1+1),x) = ite((ret4(_n1,x)<d1array(x,(_n1+0))),d1array(x,(_n1+0)),ret4(_n1,x))
ret4(0,x) = 0
(_N1>=(N_var-0))
(_n1<_N1) -> ((_n1+0)<N_var)

4. Assumption :

5. Assertion :

Output in normal notation:
1. Frame axioms:
x1 = x

2. Output equations:
temp1 = ite((__VERIFIER_nondet_int2>1),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),temp)
ret5_var1 = ite((__VERIFIER_nondet_int2>1),fun_2(x),ret5_var)
_1_FAILED1 = ite((__VERIFIER_nondet_int2>1),ite(((fun(x)!=fun_1(x)) or (fun(x)!=fun_2(x))),1,0),0)
d1array1(_x1,_x2) = ite((__VERIFIER_nondet_int2>1),ite(((_x1=x) and (_x2=(__VERIFIER_nondet_int2-1))),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),d1array10(_x1,_x2,_N2)),d1array(_x1,_x2))
ret1 = ite((__VERIFIER_nondet_int2>1),fun(x),ret)
i1 = ite((__VERIFIER_nondet_int2>1),(_N2+0),i)
ret2_var1 = ite((__VERIFIER_nondet_int2>1),fun_1(x),ret2_var)
main = 1
N_var1 = __VERIFIER_nondet_int2

3. Other axioms:
d1array10(_x1,_x2,(_n2+1)) = ite(((_x1=x) and (_x2=(_n2+0))),d1array10(x,((_n2+0)+1),_n2),d1array10(_x1,_x2,_n2))
d1array10(_x1,_x2,0) = ite(((_x1=x) and (_x2=1)),d1array(x,0),ite(((_x1=x) and (_x2=0)),d1array(x,1),d1array(_x1,_x2)))
(_N2>=((__VERIFIER_nondet_int2-0)-1))
(_n2<_N2) -> ((_n2+0)<(__VERIFIER_nondet_int2-1))

4. Assumption :

5. Assertion :
(_1_FAILED1==0)

Unknown
