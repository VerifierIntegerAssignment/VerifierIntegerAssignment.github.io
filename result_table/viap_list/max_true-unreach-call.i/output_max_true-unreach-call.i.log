Program Body
{
  int N_var;
  int RET;
  RET = 0;
  int i;
  long long ret;
  ret = 0;
  i = 0;
  while (i < N_var)
  {
    if (ret < x[i])
    {
      ret = x[i];
    }
    else
    {
      ret = ret;
    }

    i = i + 1;
  }

  RET = ret;
}

Function Name:
max
Return Type:
int
Input Variables:
{ x:array}
Local Variables:
{ i:int N_var:int ret:long RET:int}
Program Body
{
  int N_var;
  int RET;
  RET = 0;
  int _1_FAILED;
  _1_FAILED = 0;
  N_var = __VERIFIER_nondet_int();
  if (N_var > 1)
  {
    int x[N_var];
    int temp;
    int ret;
    int ret2_var;
    int ret5_var;
    int N_var;
    int f1_1_RET;
    f1_1_RET = 0;
    int f1_1_i;
    long long f1_1_ret;
    f1_1_ret = 0;
    f1_1_i = 0;
    while (f1_1_i < N_var)
    {
      if (f1_1_ret < x[f1_1_i])
      {
        f1_1_ret = x[i];
      }
      else
      {
        f1_1_ret = f1_1_ret;
      }

      f1_1_i = f1_1_i + 1;
    }

    f1_1_RET = f1_1_ret;
    ret = f1_1_RET;
    temp = x[0];
    x[0] = x[1];
    x[1] = temp;
    int N_var;
    int f1_2_RET;
    f1_2_RET = 0;
    int f1_2_i;
    long long f1_2_ret;
    f1_2_ret = 0;
    f1_2_i = 0;
    while (f1_2_i < N_var)
    {
      if (f1_2_ret < x[f1_2_i])
      {
        f1_2_ret = x[i];
      }
      else
      {
        f1_2_ret = f1_2_ret;
      }

      f1_2_i = f1_2_i + 1;
    }

    f1_2_RET = f1_2_ret;
    ret2_var = f1_2_RET;
    temp = x[0];
    int i;
    i = 0;
    while (i < (N_var - 1))
    {
      x[i] = x[i + 1];
      i = i + 1;
    }

    x[N_var - 1] = temp;
    int N_var;
    int f1_3_RET;
    f1_3_RET = 0;
    int f1_3_i;
    long long f1_3_ret;
    f1_3_ret = 0;
    f1_3_i = 0;
    while (f1_3_i < N_var)
    {
      if (f1_3_ret < x[f1_3_i])
      {
        f1_3_ret = x[i];
      }
      else
      {
        f1_3_ret = f1_3_ret;
      }

      f1_3_i = f1_3_i + 1;
    }

    f1_3_RET = f1_3_ret;
    ret5_var = f1_3_RET;
    if ((ret != ret2_var) || (ret != ret5_var))
    {
      _1_FAILED = 1;
    }

  }

  RET = 1;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ x:array f1_2_i:int temp:int ret5_var:int _1_FAILED:int f1_3_i:int f1_2_RET:int RET:int f1_1_i:int i:int ret2_var:int f1_2_ret:long ret:int f1_3_RET:int N_var:int f1_1_ret:long f1_3_ret:long f1_1_RET:int}

Output in normal notation:
1. Frame axioms:
N_var1 = N_var
d1array1(_x1,_x2) = d1array(_x1,_x2)
x1(x) = x

2. Output equations:
i1 = (_N1+0)
max(x) = ret4(_N1,x)
ret1(x) = ret4(_N1,x)

3. Other axioms:
ret4((_n1+1),x) = ite((ret4(_n1,x)<d1array(x,(_n1+0))),d1array(x,(_n1+0)),ret4(_n1,x))
ret4(0,x) = 0
(_N1>=(N_var-0))
(_n1<_N1) -> ((_n1+0)<N_var)

4. Assumption :

5. Assertion :

Output in normal notation:
1. Frame axioms:
x1 = x

2. Output equations:
f1_2_i1 = ite((__VERIFIER_nondet_int2>1),(_N3+0),f1_2_i)
f1_3_i1 = ite((__VERIFIER_nondet_int2>1),(_N5+0),f1_3_i)
temp1 = ite((__VERIFIER_nondet_int2>1),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),temp)
ret2_var1 = ite((__VERIFIER_nondet_int2>1),f1_2_ret16(_N3),ret2_var)
ret5_var1 = ite((__VERIFIER_nondet_int2>1),f1_3_ret22(_N5),ret5_var)
_1_FAILED1 = ite((__VERIFIER_nondet_int2>1),ite(((f1_1_ret12(_N2)!=f1_2_ret16(_N3)) or (f1_1_ret12(_N2)!=f1_3_ret22(_N5))),1,0),0)
d1array1(_x1,_x2) = ite((__VERIFIER_nondet_int2>1),ite(((_x1=x) and (_x2=(__VERIFIER_nondet_int2-1))),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),d1array18(_x1,_x2,_N4)),d1array(_x1,_x2))
main = 1
i1 = ite((__VERIFIER_nondet_int2>1),(_N4+0),i)
f1_1_ret1 = ite((__VERIFIER_nondet_int2>1),f1_1_ret12(_N2),f1_1_ret)
f1_2_ret1 = ite((__VERIFIER_nondet_int2>1),f1_2_ret16(_N3),f1_2_ret)
ret1 = ite((__VERIFIER_nondet_int2>1),f1_1_ret12(_N2),ret)
f1_3_RET1 = ite((__VERIFIER_nondet_int2>1),f1_3_ret22(_N5),f1_3_RET)
f1_2_RET1 = ite((__VERIFIER_nondet_int2>1),f1_2_ret16(_N3),f1_2_RET)
N_var1 = __VERIFIER_nondet_int2
f1_1_i1 = ite((__VERIFIER_nondet_int2>1),(_N2+0),f1_1_i)
f1_3_ret1 = ite((__VERIFIER_nondet_int2>1),f1_3_ret22(_N5),f1_3_ret)
f1_1_RET1 = ite((__VERIFIER_nondet_int2>1),f1_1_ret12(_N2),f1_1_RET)

3. Othe/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c:73:15: error: ‘N_var’ undeclared here (not in a function)
 int max(int x[N_var]);
               ^
/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c: In function ‘main’:
/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c:85:15: error: type of formal parameter 1 is incomplete
     ret = max(x);
               ^
/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c:89:20: error: type of formal parameter 1 is incomplete
     ret2_var = max(x);
                    ^
/home/pritom/mainDev/VIAP_ARRAY-master/viap/input_program.c:99:20: error: type of formal parameter 1 is incomplete
     ret5_var = max(x);
                    ^
r axioms:
f1_1_ret12((_n2+1)) = ite((f1_1_ret12(_n2)<d1array(x,(_n2+0))),d1array(x,i),f1_1_ret12(_n2))
f1_1_ret12(0) = 0
(_N2>=(__VERIFIER_nondet_int2-0))
(_n2<_N2) -> ((_n2+0)<__VERIFIER_nondet_int2)
f1_2_ret16((_n3+1)) = ite((f1_2_ret16(_n3)<ite(((x=x) and ((_n3+0)=1)),d1array(x,0),ite(((x=x) and ((_n3+0)=0)),d1array(x,1),d1array(x,(_n3+0))))),ite(((x=x) and (i=1)),d1array(x,0),ite(((x=x) and (i=0)),d1array(x,1),d1array(x,i))),f1_2_ret16(_n3))
f1_2_ret16(0) = 0
(_N3>=(__VERIFIER_nondet_int2-0))
(_n3<_N3) -> ((_n3+0)<__VERIFIER_nondet_int2)
d1array18(_x1,_x2,(_n4+1)) = ite(((_x1=x) and (_x2=(_n4+0))),d1array18(x,((_n4+0)+1),_n4),d1array18(_x1,_x2,_n4))
d1array18(_x1,_x2,0) = ite(((_x1=x) and (_x2=1)),d1array(x,0),ite(((_x1=x) and (_x2=0)),d1array(x,1),d1array(_x1,_x2)))
(_N4>=((__VERIFIER_nondet_int2-0)-1))
(_n4<_N4) -> ((_n4+0)<(__VERIFIER_nondet_int2-1))
f1_3_ret22((_n5+1)) = ite((f1_3_ret22(_n5)<ite(((x=x) and ((_n5+0)=(__VERIFIER_nondet_int2-1))),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),d1array18(x,(_n5+0),_N4))),ite(((x=x) and ((_N4+0)=(__VERIFIER_nondet_int2-1))),ite(((x=x) and (0=1)),d1array(x,0),ite(((x=x) and (0=0)),d1array(x,1),d1array(x,0))),d1array18(x,(_N4+0),_N4)),f1_3_ret22(_n5))
f1_3_ret22(0) = 0
(_N5>=(__VERIFIER_nondet_int2-0))
(_n5<_N5) -> ((_n5+0)<__VERIFIER_nondet_int2)

4. Assumption :

5. Assertion :
(_1_FAILED1==0)

Unknown
